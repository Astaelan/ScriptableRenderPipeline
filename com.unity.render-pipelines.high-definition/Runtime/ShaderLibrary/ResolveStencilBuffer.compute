#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel MAIN         KERNEL_NAME=MAIN         NUM_SAMPLES=1
#pragma kernel MAIN_MSAA_2  KERNEL_NAME=MAIN_MSAA_2  NUM_SAMPLES=2
#pragma kernel MAIN_MSAA_4  KERNEL_NAME=MAIN_MSAA_4  NUM_SAMPLES=4
#pragma kernel MAIN_MSAA_8  KERNEL_NAME=MAIN_MSAA_8  NUM_SAMPLES=8

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

TEXTURE2D_X_MSAA(uint2, _StencilTexture);
RW_TEXTURE2D_X(uint2, _OutputStencilBuffer);

float2 _CoarseStencilSize;

RWBuffer<uint>    _OutputCoarseStencil;

#ifdef PLATFORM_SUPPORTS_WAVE_INTRINSICS
    #define FAST_PLATFORM (PLATFORM_LANE_COUNT == 64)
#else
    #define FAST_PLATFORM 0
#endif

[numthreads(8, 8, 1)]
void KERNEL_NAME(uint3 groupId          : SV_GroupID,
                 uint3 groupThreadId    : SV_GroupThreadID,
                 uint3 dispatchThreadID : SV_DispatchThreadID)
{
    // The best shot at resolving is being overly conservative, hence the OR operator. This is by nature inaccurate. 
    uint resolvedStencil = 0;
    uint coarseStencilValue = 0;

    UNITY_UNROLL
    for (uint i = 0; i < NUM_SAMPLES; i++)
    {
        uint2 sampledStencil;
    #if (NUM_SAMPLES == 1)
        sampledStencil = LOAD_TEXTURE2D_X(_StencilTexture, dispatchThreadID.xy).g;
    #else
        sampledStencil = LOAD_TEXTURE2D_X_MSAA(_StencilTexture, dispatchThreadID.xy, i).g;
    #endif
        resolvedStencil = GetStencilValue(sampledStencil);
    }

    _OutputStencilBuffer[COORD_TEXTURE2D_X(dispatchThreadID.xy)] = uint2(resolvedStencil, resolvedStencil);

#if FAST_PLATFORM

    bool isFirstThread = WaveIsFirstLane();
    coarseStencilValue = WaveActiveBitOr(resolvedStencil);

#else

    bool isFirstThread = groupThreadId.x == 0 && groupThreadId.y == 0;
    if (isFirstThread)
    {
        coarseStencilValue = 0;
    }

    GroupMemoryBarrierWithGroupSync();

    InterlockedOr(coarseStencilValue, resolvedStencil);

    GroupMemoryBarrierWithGroupSync();

#endif

    if (isFirstThread)
    {
        uint addressIndex = Get1DAddressFromPixelCoord(groupId.xy, _CoarseStencilSize);
        _OutputCoarseStencil[addressIndex] = coarseStencilValue;
    }

}
